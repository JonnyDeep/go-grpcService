// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package student

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	StudentOp(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentOpClient, error)
	SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Ack, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) StudentOp(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentOpClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[0], "/student.StudentService/StudentOp", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentOpClient{stream}
	return x, nil
}

type StudentService_StudentOpClient interface {
	Send(*Event) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type studentServiceStudentOpClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentOpClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceStudentOpClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/student.StudentService/SendHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	StudentOp(StudentService_StudentOpServer) error
	SendHeartBeat(context.Context, *HeartBeat) (*Ack, error)
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) StudentOp(StudentService_StudentOpServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentOp not implemented")
}
func (UnimplementedStudentServiceServer) SendHeartBeat(context.Context, *HeartBeat) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartBeat not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_StudentOp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).StudentOp(&studentServiceStudentOpServer{stream})
}

type StudentService_StudentOpServer interface {
	Send(*Ack) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type studentServiceStudentOpServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentOpServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceStudentOpServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_SendHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).SendHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/SendHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).SendHeartBeat(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHeartBeat",
			Handler:    _StudentService_SendHeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StudentOp",
			Handler:       _StudentService_StudentOp_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/student.proto",
}
